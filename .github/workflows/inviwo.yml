name: Build Inviwo

on: 
  push:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'         # recognized by vcpkg
  # QT_DEBUG_PLUGINS: 1                                        # print qt plugin debug info

jobs:
  build:
    strategy:
      matrix:
        # for now macos-latest == macos-12 since macos-13 is still "beta"
        os: [windows-latest, macos-13, ubuntu-22.04]
        include:
          - os: 'windows-latest'
            triplet: 'x64-windows'
            mono: ''
            cmake: '--preset msvc-dev-vcpkg -DIVW_MODULE_HDF5=ON -DIVW_DOXYGEN_PROJECT=ON
                   -DIVW_DOXYGEN_LATEX_PATH="C:/tools/TinyTeX/bin/win32/pdflatex.exe"'
            targets: 'ALL_BUILD DOXY-Inviwo DOXY-Python package'
            installer: 'inviwo-installer-win'
            artifact: 'build/inviwo-v*.exe'
            cache: 'ccache'
          - os: 'macos-13'
            triplet: 'x64-osx'
            mono: 'mono'
            cmake: '--preset ninja-dev-vcpkg -DIVW_MODULE_HDF5=OFF'
            targets: 'all package'
            installer: 'inviwo-installer-macos'
            artifact: 'build/Inviwo-v*.dmg'
            cache: 'ccache'
          - os: 'ubuntu-22.04'
            triplet: 'x64-linux'
            mono: 'mono'
            # Disable benchmark for now due to error: 
            # memcpy’ is not a member of ‘std’; did you mean ‘wmemcpy’
            cmake: '--preset ninja-dev-vcpkg -DIVW_MODULE_HDF5=OFF -DIVW_TEST_BENCHMARKS=OFF' 
            targets: 'all package'
            installer: 'inviwo-installer-ubuntu'
            artifact: 'build/inviwo-v*.deb'
            cache: 'ccache'
      fail-fast: false
      
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    
    steps:
    - name: Chocolatey Install 
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Choco-Install is GH Actions wrappers around choco, which does retries
        Choco-Install -PackageName doxygen.install 
        Choco-Install -PackageName nsis
        Choco-Install -PackageName tinytex

    - name: Chocolatey Install paths
      if: runner.os == 'Windows'
      shell: bash
      run: |
        GP=`cygpath -u $GITHUB_PATH` 
        echo "/c/Program Files/doxygen/bin" >> $GP
        echo "/c/Program Files (x86)/NSIS" >> $GP
        echo "/c/tools/TinyTeX/bin/win32" >> $GP

    - name: Brew Install
      shell: bash
      if: runner.os == 'macOS'
      # xcode 14.2 is currently default. 
      run: |
        brew install ninja mono pkg-config
        sudo xcode-select --switch /Applications/Xcode_14.3.app/Contents/Developer

    - name: Apt Install, switch to gcc-12
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install --fix-missing libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libglew-dev ninja-build gcc-12 g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 120 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
        sudo update-alternatives --set gcc /usr/bin/gcc-12
            
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '>=3.10'
        architecture: 'x64'
    
    - name: Install Python Modules 
      shell: bash
      run: pip3 install numpy Sphinx sphinx-rtd-theme recommonmark
      
    - name: Clone VCPKG
      uses: actions/checkout@v3
      with:
        repository: 'microsoft/vcpkg'
        fetch-depth: 0
        path: 'vcpkg' # The cmake vcpkg present expects vcpkg to be next to the inviwo source folder
    
    # Cache built dependencies for faster subsequent builds
    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/inviwo/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "inviwo"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.4.2
        setup-python: false
        dir: ${{ github.workspace }}
    
    - name: Clone Inviwo
      uses: actions/checkout@v3
      with: 
        path: inviwo
        submodules: recursive

    - name: "Build Changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3
      with:
        toTag: ${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: changelog
      shell: bash
      run: |
        echo "-- Changes --"
        echo "${{ steps.build_changelog.outputs.changelog }}"
        echo "-- End --"

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        variant: ${{ matrix.cache }}
        max-size: "500M"
        verbose: 1
        key: inviwo-${{ matrix.triplet }}-${{ env.BUILD_TYPE }}-${{ github.ref }}
        restore-keys: |
          inviwo-${{ matrix.triplet }}-${{ env.BUILD_TYPE }}-${{ github.ref }}
          inviwo-${{ matrix.triplet }}-${{ env.BUILD_TYPE }}-refs/heads/master
          inviwo-${{ matrix.triplet }}-${{ env.BUILD_TYPE }}-

    - name: Test
      shell: bash 
      run: |
        which ccache
        ls -al C:/ProgramData/chocolatey/bin/ccache.exe
        ls -alR C:/ProgramData/chocolatey/**/ccache
        ls -alR C:/ProgramData/chocolatey/**/ccache.exe
        ls -alR C:/ProgramData/chocolatey/**/*.exe


    - name: Configure CMake
      shell: bash
      run: >
        cmake -S inviwo -B build
        -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}'
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.cache }}
        -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.cache }}
        ${{ matrix.cmake }}

    - name: Setup C++ Log matchers
      uses: Trass3r/setup-cpp@v1

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #  timeout-minutes: 15

    - name: Build
      timeout-minutes: 360
      shell: bash
      run: > 
        cmake --build build --config ${{ env.BUILD_TYPE }} 
        --parallel --target ${{ matrix.targets }}

    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.installer }}
        path: ${{ matrix.artifact }}

    - name: Upload doxygen
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: inviwo-cpp-api
        path: build/docs/inviwo/html/*

    - name: Upload shpinx
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: inviwo-python-api
        path: build/docs/python-api/*

  test-installer:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] # macos-latest,
        include:
          - os: 'windows-latest'
            installer: 'inviwo-installer-win'
          #- os: 'macos-latest'
          #  installer: 'inviwo-installer-macos'
        
    runs-on: ${{ matrix.os }}
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.installer }}

    # Windows
    - name: Run Windows Installer
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # find the name of the installer
        $exe = Get-ChildItem -Name Inviwo-*.exe
        # launch the nsis installer in "silent mode" (/S), should run without user interaction
        Invoke-expression "./$exe /S"
        # this will spawn the installer in the background so we need to wait for it to finish
        $proc = Get-Process | where {$_.ProcessName -like "Inviwo-*"} | Select-Object -First 1
        if ($proc) { 
          Wait-Process -Id $proc.id
        }
        
    - name: Run Inviwo
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ver = (Get-ChildItem -Name C:/"Program Files"/Inviwo/*)
        Invoke-expression "C:/'Program Files'/Inviwo/$ver/bin/Inviwo-cli.exe --logconsole --quit"
    
    # Macos
    - name: Run MacOS Installer
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Find the name of the installer 
        DMG=$(ls Inviwo-*.dmg)
        # Mount installer image
        hdiutil attach $DMG
        # Install by copying Inviwo.app to applications folder
        cp -r /Volumes/${DMG%%.dmg}/Inviwo.app /Applications/
        hdiutil detach /Volumes/${DMG%%.dmg}/

    - name: Run Inviwo
      if: runner.os == 'macOS'
      shell: bash
      run: |
        cd /Applications/Inviwo.app/Contents/MacOS/
        ./Inviwo --logconsole --quit

  update-api-docs:
    if: github.ref == 'refs/heads/master'
    needs: [build, test-installer]
    runs-on: windows-latest
    steps:
      - name: Clone Inviwo
        uses: actions/checkout@v2
        with: 
          ref: gh-pages
          path: inviwo
          submodules: false

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: inviwo-python-api
          path: inviwo/python-api

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: inviwo-cpp-api
          path: inviwo/cpp-api

      - run: |
          cd inviwo
          git add python-api
          git commit -m "Update Python API Docs"
          git push

      - run: |
          cd inviwo
          git add cpp-api
          git commit -m "Update C++ API Docs"
          git push

  update-latest-release:
    if: github.ref == 'refs/heads/master'
    needs: [build, test-installer]
    strategy:
      matrix:
        os: [windows-latest] # macos-latest,
        include:
          - os: 'windows-latest'
            installer: 'inviwo-installer-win'
          #- os: 'macos-latest'
          #  installer: 'inviwo-installer-macos'
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download installer
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.installer }}

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: Inviwo-*
        file_glob: true
        tag: latest
        overwrite: true
        body: "The latest inviwo build, updated for every merged pull request."
